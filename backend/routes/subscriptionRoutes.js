
const express = require('express');
const router = express.Router();
const Subscription = require('../models/Subscription');
const { authenticate } = require('../middlewares/authenticate');

router.post('/create-transaction', authenticate, async (req, res) => {
  const { subscriptionType, amount } = req.body;
  const userId = req.user.userId;

  // A transaction ID should be generated by the payment gateway, but we'll create a placeholder here.
  const transactionId = `txn_${Date.now()}`;

  try {
    const transaction = await Subscription.create({ userId, transactionId, subscriptionType, amount });
    res.status(201).json({ transactionId });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error creating transaction' });
  }
});

router.post('/confirm-payment', async (req, res) => {
  const { transactionId, isPaid, completedOn } = req.body;

  try {
    const transaction = await Subscription.findByTransactionId(transactionId);

    if (!transaction) {
      return res.status(404).json({ message: 'Transaction not found' });
    }

    if (transaction.is_paid) {
      return res.status(200).json({ message: 'Payment already confirmed' });
    }

    const now = new Date(completedOn);
    let endDate;

    switch (transaction.subscription_type) {
      case 'monthly':
        endDate = new Date(now.setMonth(now.getMonth() + 1));
        break;
      case 'yearly':
        endDate = new Date(now.setFullYear(now.getFullYear() + 1));
        break;
      case 'lifetime':
        endDate = new Date(now.setFullYear(now.getFullYear() + 100));
        break;
      default:
        endDate = null;
    }

    const updatedTransaction = await Subscription.update(transactionId, { isPaid, completedOn, endDate });

    res.status(200).json(updatedTransaction);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error confirming payment' });
  }
});

module.exports = router;
